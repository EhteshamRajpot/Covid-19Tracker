{"version":3,"sources":["InfoBox.js","Table.js","util.js","LineGraph.js","Map.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","Card","className","CardContent","Typography","color","Table","countries","map","country","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","options","legend","display","elements","points","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","Map","zoom","TileLayer","url","attribution","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20113ed7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nexport default function InfoBox({title, cases, total}) {\r\n    return(\r\n        <Card className={\"infoBox\"}>\r\n            <CardContent>\r\n                <Typography color={\"textSecondary\"} className={\"infoBox_title\"}>{title}</Typography>\r\n                <h2 className={\"infoBox_cases\"}>{cases}</h2>\r\n                <Typography color={\"textSecondary\"} className={\"infoBox_total\"}>{total} Total</Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}","import React from \"react\";\r\nexport default function Table({countries}) {\r\n    return(\r\n        <div className={\"table\"}>\r\n            {\r\n                countries.map(({country, cases}) =>(\r\n                    <tr>\r\n                        <td>{country}</td>\r\n                        <td>\r\n                            <strong>{cases}</strong>\r\n                        </td>\r\n                    </tr>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Circle, Popup} from \"react-leaflet\";\r\nconst casesTypeColors = {\r\n  cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 800,\r\n  },\r\n    recovered:{\r\n        hex: \"#7dd71d\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 2000,\r\n    },\r\n};\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a, b) => {\r\n        if (a.cases > b.cases){\r\n            return -1;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    })\r\n    return sortedData;\r\n};\r\n\r\nexport const showDataOnMap = (data, casesType = 'cases') =>\r\n    data.map((country) => (\r\n        <Circle\r\n                center={[country.countryInfo.lat,  country.countryInfo.long]}\r\n                fillOpacity={0.4}\r\n                color={casesTypeColors[casesType].hex}\r\n                fillColor={casesTypeColors[casesType].hex}\r\n                radius={\r\n                    Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n                }\r\n        >\r\n            <Popup>\r\n                <h1>I'm a POPUP</h1>\r\n            </Popup>\r\n        </Circle>\r\n    ));","import React, {useEffect, useState} from \"react\";\r\nimport {Line} from \"react-chartjs-2\";\r\nimport numeral from \"numeral\"\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements:{\r\n        points:{\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function(tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\")\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\")\r\n\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\n\r\n    const buildChartData = (data, casesType = \"cases\") => {\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n        for (let date in data.cases) {\r\n            if (lastDataPoint) {\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint\r\n                };\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n        }\r\n        return chartData;\r\n    };\r\nexport default function LineGraph({ casesType = 'cases'}) {\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () =>{\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n                .then(response => {\r\n                   return  response.json()\r\n                })\r\n                .then(data => {\r\n                    let chartData = buildChartData(data, \"cases\");\r\n                    setData(chartData);\r\n                    console.log(chartData);\r\n                });\r\n        };\r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n    return(\r\n        <div>\r\n            <h1>I'm a graph</h1>\r\n            {data?.length > 0 &&(\r\n                <Line\r\n                    options={options}\r\n                    data = {{\r\n                        datasets: [{\r\n                            backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                            borderColor: \"#cc1034\",\r\n                            data: data\r\n                        }],\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport \"./Map.css\";\r\nimport {MapContainer as LeafLetMap, TileLayer} from \"react-leaflet\";\r\nimport {showDataOnMap} from \"./util\";\r\n\r\n function Map({countries, casesType, center, zoom}){\r\n    return(\r\n        <div className={\"map\"}>\r\n            <LeafLetMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                url={\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}\r\n                attribution={\"&copy; <a href='http://osm.org/copyright'>OpenStreetMap</a> contributors\"}\r\n                />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafLetMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;","import './App.css';\nimport React, {useEffect, useState} from \"react\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport 'bootstrap'\nimport InfoBox from \"./InfoBox\"\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Table from \"./Table\"\nimport {sortData} from \"./util\";\nimport LineGraph from \"./LineGraph\"\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\n\nfunction App() {\n    const [countries, setCountries] = useState([]);\n    const [country, setCountry] = useState(\"WorldWide\");\n    const [countryInfo, setCountryInfo] = useState({});\n    const [tableData, setTableData] = useState([]);\n    const [mapCenter, setMapCenter] =\n        useState({ lat: 34.80746, lng: -40.4796});\n    const [mapZoom, setMapZoom] = useState(3);\n    const [mapCountries, setMapCountries] = useState([]);\n\n    useEffect(() => {\n        fetch(\"https://disease.sh/v3/covid-19/all\")\n            .then(response => response.json())\n            .then(data => {\n                setCountryInfo(data);\n            });\n    },[]);\n\n    useEffect(()=> {\n            const getCountriesData = async () => {\n               await fetch(\"https://disease.sh/v3/covid-19/countries\")\n                   .then((response) => response.json())\n                   .then((data) => {\n                       const countries= data.map((country) => (\n                           {\n                               name: country.country,\n                               value: country.countryInfo.iso2\n                           }));\n                       const sortedData = sortData(data);\n                       setTableData(sortedData);\n                       setMapCountries(data);\n                       setCountries(countries);\n                   });\n            };\n\n            getCountriesData();\n\n    },[]);\n\n    const onCountryChange = async (event) => {\n        const countryCode = event.target.value;\n        setCountry(countryCode);\n\n        const url = countryCode === \"WorldWide\"\n            ? \"https://disease.sh/v3/covid-19/all\"\n            : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n        await fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                setCountry(countryCode);\n                setCountryInfo(data);\n\n                setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n                setMapZoom(4);\n            });\n    };\n            console.log(\"info>>>\", countryInfo)\n  return (\n            <div className=\"App\">\n                <div className={\"app_left\"}>\n                    <div className={\"app_header\"}>\n                        <h1>COVID-19 TRACKER</h1>\n                            <FormControl className={\"app_dropdown\"}>\n                                <Select variant={\"outlined\"} value={country} onChange={onCountryChange}>\n                                    <MenuItem value=\"WorldWide\">Worldwide</MenuItem>\n                                    {\n                                        countries.map((country)=>(\n                                            <MenuItem value={country.value}>{country.name}</MenuItem>\n                                        ))\n                                    }\n                                </Select>\n                            </FormControl>\n                    </div>\n                    <div className={\"app_stats\"} >\n                        <InfoBox title={\"CoronaVirus Cases\"} cases={countryInfo.todayCases} total={countryInfo.cases}/>\n                        <InfoBox title={\"Recovered\"} cases={countryInfo.todayRecovered} total={countryInfo.recovered}/>\n                        <InfoBox title={\"Deaths\"} cases={countryInfo.todayDeaths} total={countryInfo.deaths}/>\n                    </div>\n                    <Map\n                        countries={mapCountries}\n                    center={mapCenter}\n                    zoom={mapZoom}\n                    />\n\n                </div>\n                <Card className=\"app_right\">\n                    <CardContent>\n                        <h3>Live Cases by Country</h3>\n                        <Table countries={tableData}></Table>\n                        <h3>World wide new cases</h3>\n                        <LineGraph/>\n                    </CardContent>\n                </Card>\n            </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}